{"ast":null,"code":"const initialState = {\n  books: [],\n  loading: true,\n  error: null,\n  cartItems: [],\n  orderTotal: 220,\n  idState: null\n};\n\nconst reducer = (state = initialState, action) => {\n  console.log(action.type);\n\n  switch (action.type) {\n    case 'FETCH_BOOKS_REQUREST':\n      return { ...state,\n        books: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_SUCCESS':\n      return { ...state,\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_FAILURE':\n      return { ...state,\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n\n    case 'BOOK_ADDED_TO_CART':\n      const bookId = action.payload;\n      const book = state.books.find(book => book.id === bookId);\n\n      if (!state.cartItems.includes(bookId)) {\n        const newItem = {\n          id: book.id,\n          name: book.title,\n          count: 1,\n          total: book.price\n        };\n        return { ...state,\n          cartItems: [...state.cartItems, newItem]\n        };\n      } else if (state.cartItems.includes(bookId)) {\n        const items = state.cartItems;\n        const idx = items.findIndex(item => item.id === bookId);\n        const editItem = items[idx];\n        const newItem = { ...editItem,\n          count: editItem.count + 1,\n          total: editItem.total + book.price\n        };\n        return { ...state,\n          cartItems: [...items.slice(0, idx), newItem, ...items.slice(idx, 0)]\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/React-projects/re-store/src/reducers/reducers.js"],"names":["initialState","books","loading","error","cartItems","orderTotal","idState","reducer","state","action","console","log","type","payload","bookId","book","find","id","includes","newItem","name","title","count","total","price","items","idx","findIndex","item","editItem","slice"],"mappings":"AAAA,MAAMA,YAAY,GAAI;AAClBC,EAAAA,KAAK,EAAE,EADW;AAElBC,EAAAA,OAAO,EAAE,IAFS;AAGlBC,EAAAA,KAAK,EAAE,IAHW;AAIlBC,EAAAA,SAAS,EAAE,EAJO;AAKlBC,EAAAA,UAAU,EAAE,GALM;AAMlBC,EAAAA,OAAO,EAAE;AANS,CAAtB;;AASA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAE9CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;;AAEA,UAAOH,MAAM,CAACG,IAAd;AACI,SAAK,sBAAL;AACI,aAAO,EACH,GAAGJ,KADA;AAEHP,QAAAA,KAAK,EAAE,EAFJ;AAGHC,QAAAA,OAAO,EAAE,IAHN;AAIHC,QAAAA,KAAK,EAAE;AAJJ,OAAP;;AAMJ,SAAK,qBAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHP,QAAAA,KAAK,EAAEQ,MAAM,CAACI,OAFX;AAGHX,QAAAA,OAAO,EAAE,KAHN;AAIHC,QAAAA,KAAK,EAAE;AAJJ,OAAP;;AAMJ,SAAK,qBAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHP,QAAAA,KAAK,EAAE,EAFJ;AAGHC,QAAAA,OAAO,EAAE,KAHN;AAIHC,QAAAA,KAAK,EAAEM,MAAM,CAACI;AAJX,OAAP;;AAMJ,SAAK,oBAAL;AACI,YAAMC,MAAM,GAAGL,MAAM,CAACI,OAAtB;AACA,YAAME,IAAI,GAAGP,KAAK,CAACP,KAAN,CAAYe,IAAZ,CAAkBD,IAAD,IAAUA,IAAI,CAACE,EAAL,KAAYH,MAAvC,CAAb;;AAEA,UAAG,CAACN,KAAK,CAACJ,SAAN,CAAgBc,QAAhB,CAAyBJ,MAAzB,CAAJ,EAAsC;AAClC,cAAMK,OAAO,GAAG;AACZF,UAAAA,EAAE,EAAEF,IAAI,CAACE,EADG;AAEZG,UAAAA,IAAI,EAAEL,IAAI,CAACM,KAFC;AAGZC,UAAAA,KAAK,EAAE,CAHK;AAIZC,UAAAA,KAAK,EAAER,IAAI,CAACS;AAJA,SAAhB;AAOA,eAAO,EACH,GAAGhB,KADA;AAEHJ,UAAAA,SAAS,EAAE,CACP,GAAGI,KAAK,CAACJ,SADF,EAEPe,OAFO;AAFR,SAAP;AAOH,OAfD,MAeO,IAAGX,KAAK,CAACJ,SAAN,CAAgBc,QAAhB,CAAyBJ,MAAzB,CAAH,EAAqC;AAExC,cAAMW,KAAK,GAAGjB,KAAK,CAACJ,SAApB;AAEA,cAAMsB,GAAG,GAAGD,KAAK,CAACE,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACX,EAAL,KAAYH,MAAtC,CAAZ;AAEA,cAAMe,QAAQ,GAAGJ,KAAK,CAACC,GAAD,CAAtB;AAEA,cAAMP,OAAO,GAAG,EACZ,GAAGU,QADS;AAEZP,UAAAA,KAAK,EAAEO,QAAQ,CAACP,KAAT,GAAiB,CAFZ;AAGZC,UAAAA,KAAK,EAAEM,QAAQ,CAACN,KAAT,GAAiBR,IAAI,CAACS;AAHjB,SAAhB;AAMA,eAAO,EACH,GAAIhB,KADD;AAEHJ,UAAAA,SAAS,EAAE,CACP,GAAGqB,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeJ,GAAf,CADI,EAEPP,OAFO,EAGP,GAAGM,KAAK,CAACK,KAAN,CAAYJ,GAAZ,EAAiB,CAAjB,CAHI;AAFR,SAAP;AAQH;;AAGL;AACI,aAAOlB,KAAP;AAnER;AAsEH,CA1ED;;AA4EA,eAAeD,OAAf","sourcesContent":["const initialState =  {\r\n    books: [],\r\n    loading: true,\r\n    error: null,\r\n    cartItems: [],\r\n    orderTotal: 220,\r\n    idState: null\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    console.log(action.type)\r\n\r\n    switch(action.type) {\r\n        case 'FETCH_BOOKS_REQUREST' :\r\n            return {\r\n                ...state,\r\n                books: [],\r\n                loading: true,\r\n                error: null\r\n            }\r\n        case 'FETCH_BOOKS_SUCCESS' : \r\n            return {\r\n                ...state,\r\n                books: action.payload,\r\n                loading: false,\r\n                error: null\r\n            };\r\n        case 'FETCH_BOOKS_FAILURE' : \r\n            return {\r\n                ...state,\r\n                books: [],\r\n                loading: false,\r\n                error: action.payload\r\n            };\r\n        case 'BOOK_ADDED_TO_CART' :\r\n            const bookId = action.payload\r\n            const book = state.books.find((book) => book.id === bookId);\r\n\r\n            if(!state.cartItems.includes(bookId)) {\r\n                const newItem = {\r\n                    id: book.id,\r\n                    name: book.title,\r\n                    count: 1,\r\n                    total: book.price\r\n                }; \r\n\r\n                return {\r\n                    ...state,\r\n                    cartItems: [\r\n                        ...state.cartItems,\r\n                        newItem\r\n                    ]\r\n                }\r\n            }else  if(state.cartItems.includes(bookId)) {\r\n\r\n                const items = state.cartItems;\r\n\r\n                const idx = items.findIndex((item) => item.id === bookId );\r\n\r\n                const editItem = items[idx];\r\n\r\n                const newItem = {\r\n                    ...editItem,\r\n                    count: editItem.count + 1,\r\n                    total: editItem.total + book.price\r\n                }\r\n\r\n                return {\r\n                    ... state,\r\n                    cartItems: [\r\n                        ...items.slice(0, idx),\r\n                        newItem,\r\n                        ...items.slice(idx, 0)\r\n                    ]\r\n                } \r\n            }\r\n\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}