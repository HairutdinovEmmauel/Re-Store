{"ast":null,"code":"const initialState = {\n  books: [],\n  loading: true,\n  error: null,\n  cartItems: [],\n  orderTotal: 220,\n  idState: null\n};\n\nconst updateCartItems = (cartItems, item, itemIndex) => {\n  if (item == -1) {\n    return { ...cartItems,\n      item\n    };\n  }\n\n  return {\n    cartItems: [...cartItems.slice(0, idx), item, ...cartItems.slice(idx + 1)]\n  };\n};\n\nconst updateCartItem = (book, item = {}) => {\n  const {\n    id = book.id,\n    title = book.title,\n    count = 0,\n    total = 0\n  } = item;\n  return {\n    id,\n    title,\n    count: count + 1,\n    total: total + book.price\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  console.log(action.type);\n\n  switch (action.type) {\n    case 'FETCH_BOOKS_REQUREST':\n      return { ...state,\n        books: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_SUCCESS':\n      return { ...state,\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_FAILURE':\n      return { ...state,\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n\n    case 'BOOK_ADDED_TO_CART':\n      const bookId = action.payload;\n      const book = state.books.find(book => book.id === bookId);\n      const itemIndex = state.cartItems.findIndex(book => book.id === bookId);\n      const item = state.cartItems[itemIndex];\n      const newItem = updateCartItem(book, item);\n      return { ...state,\n        cartItems: updateCartItem(state.cartItems, item, itemIndex)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/React-projects/re-store/src/reducers/reducers.js"],"names":["initialState","books","loading","error","cartItems","orderTotal","idState","updateCartItems","item","itemIndex","slice","idx","updateCartItem","book","id","title","count","total","price","reducer","state","action","console","log","type","payload","bookId","find","findIndex","newItem"],"mappings":"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","sourcesContent":["const initialState =  {\r\n    books: [],\r\n    loading: true,\r\n    error: null,\r\n    cartItems: [],\r\n    orderTotal: 220,\r\n    idState: null\r\n}\r\n\r\nconst updateCartItems = (cartItems, item, itemIndex) => {\r\n    \r\n    if(item == -1) {\r\n        return {\r\n            ...cartItems,\r\n            item\r\n        }\r\n    }\r\n    return {\r\n        cartItems: [\r\n            ...cartItems.slice(0, idx),\r\n            item,\r\n            ...cartItems.slice(idx + 1 )\r\n        ]\r\n    } \r\n}\r\n\r\nconst updateCartItem = (book, item = {}) => {\r\n    \r\n    const {\r\n        id = book.id,\r\n        title = book.title,\r\n        count = 0,\r\n        total = 0 } = item;\r\n\r\n    return {\r\n        id,\r\n        title,\r\n        count: count + 1,\r\n        total: total + book.price\r\n    }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    console.log(action.type)\r\n\r\n    switch(action.type) {\r\n        case 'FETCH_BOOKS_REQUREST' :\r\n            return {\r\n                ...state,\r\n                books: [],\r\n                loading: true,\r\n                error: null\r\n            }\r\n        case 'FETCH_BOOKS_SUCCESS' : \r\n            return {\r\n                ...state,\r\n                books: action.payload,\r\n                loading: false,\r\n                error: null\r\n            };\r\n        case 'FETCH_BOOKS_FAILURE' : \r\n            return {\r\n                ...state,\r\n                books: [],\r\n                loading: false,\r\n                error: action.payload\r\n            };\r\n        case 'BOOK_ADDED_TO_CART' :\r\n            const bookId = action.payload\r\n            const book = state.books.find((book) => book.id === bookId);\r\n            const itemIndex = state.cartItems.findIndex((book) => book.id === bookId);\r\n            const item = state.cartItems[itemIndex];\r\n\r\n            const newItem = updateCartItem(book, item)\r\n\r\n            return {\r\n                ...state,\r\n                cartItems: updateCartItem(state.cartItems, item, itemIndex)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}